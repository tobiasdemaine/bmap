#ifdef GL_ES
precision highp float;
#endif
#extension GL_OES_standard_derivatives : enable

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

// reference code
//https://www.shadertoy.com/view/MdKfWR


vec3 color = vec3(0.58,0.45,0.35);

		
mat2 rot(float x)
{
	return mat2(cos(x),sin(x),-sin(x),cos(x));
}

float sdRect(vec2 p,vec2 b)
{
	vec2 d = abs(p) - b;
	return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

vec3 art(vec2 p, float z)
{
	vec2 q = (fract(p / 10.0) - 0.5) * 10.0;
	float d = 9999.0;
	for(int i = 0;i < 7;++i)
	{
		q = abs(q) - 0.5;
		q *= rot(0.795398);
		q = abs(q) - 0.5;
		q *= rot(z * 0.5);
		float k = sdRect(q,vec2(1.0,0.35 + q.x));
		d = min(d,k);
	}
	float f = 1.0 / (1.0 + abs(d));
	return vec3(smoothstep(0.5,0.8,f));
}

void main( void ) {

	vec2 pos = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x,resolution.y);
	
	pos = pos * 2.0 - 1.0;
	vec3 t = art(pos * 8.0,time);
	color *= vec3((pos.x + 1.5) * sin(time * 0.54) * 0.84,(pos.y + 1.5) * cos(time * 0.85) * 0.84,pos.x / pos.y);
	color = abs(color);
	color += vec3(0.32,0.23,0.24);
	
	gl_FragColor = vec4(t * color,1.0);

}