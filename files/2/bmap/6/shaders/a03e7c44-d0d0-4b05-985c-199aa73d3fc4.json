#ifdef GL_ES
precision highp float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

#define iterations 4
#define formuparam2 0.89
#define volsteps 10
#define stepsize 0.190
#define zoom 3.900
#define tile 0.450
#define speed2 0.010
#define brightness 0.2
#define darkmatter 0.400
#define distfading 0.560
#define saturation 0.400
#define transverseSpeed 1.1
#define cloud 0.2
#define PI 3.14159265359

float triangle(float x, float a) {
  return 2.0 * abs(2.0 * ((x / a) - floor((x / a) + 0.5))) - 1.0;
}

float field( in vec3 p) {
  float strength = 7.0 + 0.03 * log(1.e-6 + fract(sin(time) * 4373.11));
  float accum = 0.0;
  float prev = 0.0;
  float tw = 0.0;

  for (int i = 0; i < 6; ++i) {
    float mag = dot(p, p);
    p = abs(p) / mag + vec3(-0.5, -0.8 + 0.1 * sin(time * 0.2 + 2.0), -1.1 + 0.3 * cos(time * 0.15));
    float w = exp(-float(i) / 7.0);
    accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
    tw += w;
    prev = mag;
  }
  return max(0.0, 5.0 * accum / tw - 0.7);
}

void main() {

  vec2 uv2 = (2.0 * (gl_FragCoord.xy / resolution.xy)) - 1.0;
  vec2 uvs = uv2 * resolution.xy / max(resolution.x, resolution.y);

  float time2 = time  ;

  float speed = speed2;
  speed = 0.005 * cos(time2 * 0.02 + PI / 4.0);

  float formuparam = formuparam2;

  // get coords and direction

  vec2 uv = uvs;

  // mouse rotation
  float aXZ = 0.9;
  float aYZ = -0.6;
  float aXY = 0.9 + time * 0.04;

  mat2 rotXZ = mat2(cos(aXZ), sin(aXZ), -sin(aXZ), cos(aXZ));
  mat2 rotYZ = mat2(cos(aYZ), sin(aYZ), -sin(aYZ), cos(aYZ));
  mat2 rotXY = mat2(cos(aXY), sin(aXY), -sin(aXY), cos(aXY));

  float v2 = 1.0;

  vec3 dir = vec3(uv * zoom, 1.0);
  vec3 from = vec3(0.0);

  from.x -= 0.5 * (-0.5);
  from.y -= 0.5 * (-0.5);

  vec3 forward = vec3(0.0, 0.0, 1.0);

  from.x += transverseSpeed * (1.0) * cos(0.01 * time) + 0.001 * time;
  from.y += transverseSpeed * (1.0) * sin(0.01 * time) + 0.001 * time;
  from.z += 0.003 * time;

  dir.xy *= rotXY;
  forward.xy *= rotXY;

  dir.xz *= rotXZ;
  forward.xz *= rotXZ;

  dir.yz *= rotYZ;
  forward.yz *= rotYZ;

  from.xy *= -rotXY;
  from.xz *= rotXZ;
  from.yz *= rotYZ;

  // zoom
  float zooom = (time2 - 3311.0) * speed;
  from += forward * zooom;
  float sampleShift = mod(zooom, stepsize);

  float zoffset = -sampleShift;
  sampleShift /= stepsize; // make from 0 to 1

  // volumetric rendering
  float s = 0.24;
  float s3 = s + stepsize / 2.0;
  vec3 v = vec3(0.0);
  float t3 = 0.0;

  vec3 backCol2 = vec3(0.);
  for (int r = 0; r < volsteps; r++) {
    vec3 p2 = from + (s + zoffset) * dir;
    vec3 p3 = (from + (s3 + zoffset) * dir) * (1.9 / zoom);

    p2 = abs(vec3(tile) - mod(p2, vec3(tile * 2.0))); // tiling fold
    p3 = abs(vec3(tile) - mod(p3, vec3(tile * 2.0))); // tiling fold

    #ifdef cloud
    t3 = field(p3);
    #endif

    float pa = 0.0;
    float a = 0.0;
    for (int i = 0; i < iterations; i++) {
      p2 = abs(p2) / dot(p2, p2) - formuparam; // the magic formula
      float D = abs(length(p2) - pa); // absolute sum of average change

      if (i > 2) {
        a += i > 7 ? min(12.0, D) : D;
      }
      pa = length(p2);
    }

    a = a * a * a; // add contrast

    // brightens stuff up a bit
    float s1 = s + zoffset;

    // need closed form expression for this, now that we shift samples
    float fade = pow(distfading, max(0.0, float(r) - sampleShift));

    v += fade;

    // fade out samples as they approach the camera
    if (r == 0)
      fade *= (1.0 - (sampleShift));

    // fade in samples as they approach from the distance
    if (r == volsteps - 1)
      fade *= sampleShift;
    v += vec3(s1, s1 * s1, s1 * s1 * s1 * s1) * a * brightness * fade; // coloring based on distance

    backCol2 += mix(0.4, 1.0, v2) * vec3(0.20 * t3 * t3 * t3, 0.4 * t3 * t3, t3 * 0.7) * fade;

    s += stepsize;
    s3 += stepsize;
  }

  v = mix(vec3(length(v)), v, saturation); // color adjust

  vec4 forCol2 = vec4(v * 0.01, 1.0);

  #ifdef cloud
  backCol2 *= cloud;
  #endif

  // backCol2.r *= 1.80;
  // backCol2.g *= 0.05;
  // backCol2.b *= 0.90;

  gl_FragColor = forCol2 + vec4(backCol2, 1.0);

}